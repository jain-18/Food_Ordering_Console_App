package com.foodapp.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Random;

import com.foodapp.DBOperation.CouponDAO;
import com.foodapp.DBOperation.DeliveryPartnerDAO;
import com.foodapp.DBOperation.MenuDAO;
import com.foodapp.entity.CartItem;
import com.foodapp.entity.Coupon;
import com.foodapp.entity.DeliveryPartner;
import com.foodapp.entity.MenuItem;
import com.foodapp.entity.User;

public class OrderService {
	private final MenuDAO menuDAO = new MenuDAO();
    private final CouponDAO couponDAO = new CouponDAO();
    private final DeliveryPartnerDAO deliveryDAO = new DeliveryPartnerDAO();

    private final List<CartItem> cart = new ArrayList<>();

    public void orderMenu(User user) throws ClassNotFoundException {
        while (true) {
            System.out.println("\n--- User Menu ---");
            System.out.println("1. View Menu and Add to Cart");
            System.out.println("2. Show Cart");
            System.out.println("3. Logout");
            int choice = InputUtil.getInt("Enter choice: ");

            switch (choice) {
                case 1 -> showAndAddMenu();
                case 2 -> ;
                case 3 -> {
                    System.out.println("Logging out...");
                    return;
                }
                default -> System.out.println("Invalid choice.");
            }
        }
    }

    private void showAndAddMenu() throws ClassNotFoundException {
        List<MenuItem> items = menuDAO.findAll();
        if (items.isEmpty()) {
            System.out.println("Menu is empty.");
            return;
        }

        boolean continueAdding = true;
        while (continueAdding) {
            System.out.println("\n--- Menu ---");
            for (MenuItem item : items) {
                System.out.println(item.getId() + ". " + item.getName() + " - ₹" + item.getPrice());
            }

            int id = InputUtil.getInt("Enter item ID to add to cart: ");
            int qty = InputUtil.getInt("Enter quantity: ");

            Optional<MenuItem> found = items.stream().filter(i -> i.getId() == id).findFirst();
            if (found.isPresent()) {
                cart.add(new CartItem(found.get(), qty));
                System.out.println("Added to cart.");
            } else {
                System.out.println("Invalid item ID.");
            }

            String choice = InputUtil.getString("Do you want to add another item? (y/n): ").trim().toLowerCase();
            if (!choice.equals("y")) {
                continueAdding = false;
            }
        }
    }
    
    private void cartMenu(User user) throws ClassNotFoundException {
        if (cart.isEmpty()) {
            System.out.println("Cart is empty.");
            return;
        }

        boolean running = true;
        while (running) {
            System.out.println("\n--- Cart Menu ---");
            System.out.println("1. View Cart & Order");
            System.out.println("2. Empty Cart");
            System.out.println("3. Go Back");
            int choice = InputUtil.getInt("Choose an option: ");

            switch (choice) {
                case 1 -> {
                    showCart(user); // Shows cart and handles payment
                    running = false; // after order, exit menu
                }
                case 2 -> {
                    cart.clear();
                    System.out.println("Cart has been emptied.");
                }
                case 3 -> running = false;
                default -> System.out.println("Invalid option, try again.");
            }
        }
    }



    private void showCart(User user) throws ClassNotFoundException {
        if (cart.isEmpty()) {
            System.out.println("Cart is empty.");
            return;
        }

        double total = 0;
        System.out.println("\n--- Cart ---");
        for (CartItem item : cart) {
            System.out.println(item.getItem().getName() + " x " + item.getQuantity() + " = ₹" + item.getTotal());
            total += item.getTotal();
        }

        double discount = 0;

        if (total > 500) {
            discount += 50;
            System.out.println("Flat discount of ₹50 applied.");
        }

        String apply = InputUtil.getString("Apply coupon? (yes/no): ");
        if (apply.equalsIgnoreCase("yes")) {
            String code = InputUtil.getString("Enter coupon code: ");
            Coupon coupon = couponDAO.findByCode(code);
            if (coupon != null) {
                discount += coupon.getDiscount();
                System.out.println("Coupon applied: ₹" + coupon.getDiscount());
            } else {
                System.out.println("Invalid coupon.");
            }
        }

        double grandTotal = total - discount;
        System.out.println("Total: ₹" + total);
        System.out.println("Discount: ₹" + discount);
        System.out.println("Grand Total: ₹" + grandTotal);

        String proceed = InputUtil.getString("Proceed to payment? (yes/no): ");
        if (proceed.equalsIgnoreCase("yes")) {
            processPayment(grandTotal, user);
            cart.clear();
        }
    }

    private void processPayment(double amount, User user) throws ClassNotFoundException {
        System.out.println("\n--- Payment ---");
        System.out.println("1. Cash");
        System.out.println("2. UPI");
        int mode = InputUtil.getInt("Select payment method: ");
        String paymentMode = switch (mode) {
            case 1 -> "Cash";
            case 2 -> "UPI";
            default -> "Unknown";
        };

        List<DeliveryPartner> partners = deliveryDAO.findAll();
        if (partners.isEmpty()) {
            System.out.println("No delivery partners available!");
            return;
        }
        DeliveryPartner assigned = partners.get(new Random().nextInt(partners.size()));

        System.out.println("\n========= INVOICE =========");
        System.out.println("Customer: " + user.getFirstName() + " " + user.getLastName());
        System.out.println("Address: " + user.getAddress());
        System.out.println("\nItems:");

        double subtotal = 0;
        for (CartItem item : cart) {
            System.out.println("- " + item.getItem().getName() + " x " + item.getQuantity() + " = ₹" + item.getTotal());
            subtotal += item.getTotal();
        }

        double discount = (subtotal > 500) ? 50 : 0;
        Coupon coupon = null;
        String code = InputUtil.getString("Re-enter coupon code (if any) for invoice: ");
        if (!code.trim().isEmpty()) {
            coupon = couponDAO.findByCode(code);
            if (coupon != null) {
                discount += coupon.getDiscount();
            }
        }

        System.out.println("Subtotal: ₹" + subtotal);
        System.out.println("Discount: ₹" + discount);
        System.out.println("Total Payable: ₹" + (subtotal - discount));
        System.out.println("Payment Mode: " + paymentMode);
        System.out.println("Delivery Partner: " + assigned.getName());
        System.out.println("============================");
    }
}
